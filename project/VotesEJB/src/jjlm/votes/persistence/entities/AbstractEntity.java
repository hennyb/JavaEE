/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jjlm.votes.persistence.entities;
/*
 * This code was generated automatically. Do NOT edit this file, changes will be lost.
 */

import java.io.Serializable;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;
import jjlm.votes.logic.to.AbstractEntityTO;

@MappedSuperclass
public abstract class AbstractEntity<E extends AbstractEntity<E, T>, T extends AbstractEntityTO>
		implements Serializable {

	private static final long serialVersionUID = 2946629991096768396L;
	protected Integer id;

	public AbstractEntity() {
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		@SuppressWarnings("unchecked")
		AbstractEntity<E, T> other = (AbstractEntity<E, T>) obj;
		if (id == null) {
			if (other.id != null) {
				return false;
			}
		} else if (!id.equals(other.id)) {
			return false;
		}
		return true;
	}

	public abstract T createTO();

	@Override
	public String toString() {
		return getClass().getSimpleName() + "#" + (getId() == null ? "new" : getId());
	}

	public static <ET extends AbstractEntity<ET, TO>, TO extends AbstractEntityTO> List<TO> createTransferList(Iterable<ET> i) {
		List<TO> result = new ArrayList<>();
		for (ET e : i) {
			result.add(e.createTO());
		}
		return result;
	}

	public <ET extends AbstractEntity<ET, TO>, TO extends AbstractEntityTO> Set<TO> createTransferSet(Iterable<ET> i) {
		Set<TO> result = new LinkedHashSet<>();
		for (ET e : i) {
			result.add(e.createTO());
		}
		return result;
	}

	public <ET extends AbstractEntity<ET, TO>, TO extends AbstractEntityTO> Set<TO> createSortedTransferSet(Iterable<ET> i) {
		SortedSet<TO> result = new TreeSet<>();
		for (ET e : i) {
			result.add(e.createTO());
		}
		return result;
	}
}
